#include "ddsJoySplDcps.h"
#include "ccpp_ddsJoy.h"

char *
__ddsJoy__name(void)
{
    return CORBA::string_dup("ddsJoy");
}

char *
__ddsJoy__keys(void)
{
    return CORBA::string_dup("");
}

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>

c_bool
__ddsJoy__copyIn(
    c_base base,
    struct ddsJoy *from,
    struct _ddsJoy *to)
{
    c_bool result = TRUE;

    if(result){
        extern c_bool __Header__copyIn(c_base, Header *, _Header *);
        result = __Header__copyIn(base, &from->header, &to->header);
    }
    {
/* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 594 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        c_float *dest0;
        ::ddsJoy::_axes_seq *src = &from->axes;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_float"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_float>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (c_float *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 1549 */
            c_float *buf0;
            buf0 = (c_float *)(*src).get_buffer();
            memcpy (dest0,buf0,length0*4);
        }
        to->axes = (c_sequence)dest0;
#else
        dest0 = (c_float *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 1549 */
            c_float *buf0;
            buf0 = (c_float *)(*src).get_buffer();
            memcpy (dest0,buf0,length0*4);
        }
        to->axes = (c_sequence)dest0;
#endif
    }
    {
/* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 594 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        c_long *dest0;
        ::ddsJoy::_buttons_seq *src = &from->buttons;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_long"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_long>",subtype0,0);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
         dest0 = (c_long *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 1549 */
            c_long *buf0;
            buf0 = (c_long *)(*src).get_buffer();
            memcpy (dest0,buf0,length0*4);
        }
        to->buttons = (c_sequence)dest0;
#else
        dest0 = (c_long *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 1549 */
            c_long *buf0;
            buf0 = (c_long *)(*src).get_buffer();
            memcpy (dest0,buf0,length0*4);
        }
        to->buttons = (c_sequence)dest0;
#endif
    }
    return result;
}

void
__ddsJoy__copyOut(
    void *_from,
    void *_to)
{
    struct _ddsJoy *from = (struct _ddsJoy *)_from;
    struct ddsJoy *to = (struct ddsJoy *)_to;
    {
        extern void __Header__copyOut(void *, void *);
        __Header__copyOut((void *)&from->header, (void *)&to->header);
    }
    {
        long size0;
        c_float *src0 = (c_float *)from->axes;
        ::ddsJoy::_axes_seq *dst = &to->axes;

        size0 = c_arraySize(c_sequence(from->axes));
        to->axes.length(size0);
        {
            c_float *buf0;
            buf0 = (c_float *)(*dst).get_buffer();
            memcpy (buf0,src0,size0*4);
        }
    }
    {
        long size0;
        c_long *src0 = (c_long *)from->buttons;
        ::ddsJoy::_buttons_seq *dst = &to->buttons;

        size0 = c_arraySize(c_sequence(from->buttons));
        to->buttons.length(size0);
        {
            c_long *buf0;
            buf0 = (c_long *)(*dst).get_buffer();
            memcpy (buf0,src0,size0*4);
        }
    }
}

