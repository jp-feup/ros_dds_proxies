//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: PoseDcps.cpp
//  Source: PoseDcps.idl
//  Generated: Wed Oct  2 09:48:26 2013
//  OpenSplice V6.2.0
//  
//******************************************************************

#include "PoseDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < Pose, struct PoseSeq_uniq_>;
#endif

const char * PoseTypeSupportInterface::_local_id = "IDL:PoseTypeSupportInterface:1.0";

PoseTypeSupportInterface_ptr PoseTypeSupportInterface::_duplicate (PoseTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PoseTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, PoseTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PoseTypeSupportInterface_ptr PoseTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   PoseTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (PoseTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < PoseTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

PoseTypeSupportInterface_ptr PoseTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   PoseTypeSupportInterface_ptr result;
   result = dynamic_cast < PoseTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * PoseDataWriter::_local_id = "IDL:PoseDataWriter:1.0";

PoseDataWriter_ptr PoseDataWriter::_duplicate (PoseDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PoseDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, PoseDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PoseDataWriter_ptr PoseDataWriter::_narrow (DDS::Object_ptr p)
{
   PoseDataWriter_ptr result = NULL;
   if (p && p->_is_a (PoseDataWriter::_local_id))
   {
      result = dynamic_cast < PoseDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

PoseDataWriter_ptr PoseDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   PoseDataWriter_ptr result;
   result = dynamic_cast < PoseDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * PoseDataReader::_local_id = "IDL:PoseDataReader:1.0";

PoseDataReader_ptr PoseDataReader::_duplicate (PoseDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PoseDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, PoseDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PoseDataReader_ptr PoseDataReader::_narrow (DDS::Object_ptr p)
{
   PoseDataReader_ptr result = NULL;
   if (p && p->_is_a (PoseDataReader::_local_id))
   {
      result = dynamic_cast < PoseDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

PoseDataReader_ptr PoseDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   PoseDataReader_ptr result;
   result = dynamic_cast < PoseDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * PoseDataReaderView::_local_id = "IDL:PoseDataReaderView:1.0";

PoseDataReaderView_ptr PoseDataReaderView::_duplicate (PoseDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean PoseDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, PoseDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

PoseDataReaderView_ptr PoseDataReaderView::_narrow (DDS::Object_ptr p)
{
   PoseDataReaderView_ptr result = NULL;
   if (p && p->_is_a (PoseDataReaderView::_local_id))
   {
      result = dynamic_cast < PoseDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

PoseDataReaderView_ptr PoseDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   PoseDataReaderView_ptr result;
   result = dynamic_cast < PoseDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



