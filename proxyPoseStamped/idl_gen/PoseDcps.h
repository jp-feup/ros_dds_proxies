//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: PoseDcps.h
//  Source: PoseDcps.idl
//  Generated: Wed Oct  2 09:48:26 2013
//  OpenSplice V6.2.0
//  
//******************************************************************
#ifndef _POSEDCPS_H_
#define _POSEDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "Quaternion.h"
#include "dds_dcps_builtintopics.h"
#include "Pose.h"
#include "dds_builtinTopics.h"
#include "Point.h"
#include "Time.h"
#include "dds_dcps_interfaces.h"
struct Time;
struct Point;
struct Quaternion;
struct Pose;

class PoseTypeSupportInterface;

typedef PoseTypeSupportInterface * PoseTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < PoseTypeSupportInterface> PoseTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < PoseTypeSupportInterface> PoseTypeSupportInterface_out;


class PoseDataWriter;

typedef PoseDataWriter * PoseDataWriter_ptr;
typedef DDS_DCPSInterface_var < PoseDataWriter> PoseDataWriter_var;
typedef DDS_DCPSInterface_out < PoseDataWriter> PoseDataWriter_out;


class PoseDataReader;

typedef PoseDataReader * PoseDataReader_ptr;
typedef DDS_DCPSInterface_var < PoseDataReader> PoseDataReader_var;
typedef DDS_DCPSInterface_out < PoseDataReader> PoseDataReader_out;


class PoseDataReaderView;

typedef PoseDataReaderView * PoseDataReaderView_ptr;
typedef DDS_DCPSInterface_var < PoseDataReaderView> PoseDataReaderView_var;
typedef DDS_DCPSInterface_out < PoseDataReaderView> PoseDataReaderView_out;


struct PoseSeq_uniq_ {};
typedef DDS_DCPSUFLSeq < Pose, struct PoseSeq_uniq_> PoseSeq;
typedef DDS_DCPSSequence_var < PoseSeq> PoseSeq_var;
typedef DDS_DCPSSequence_out < PoseSeq> PoseSeq_out;
class PoseTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef PoseTypeSupportInterface_ptr _ptr_type;
   typedef PoseTypeSupportInterface_var _var_type;

   static PoseTypeSupportInterface_ptr _duplicate (PoseTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static PoseTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseTypeSupportInterface_ptr _this () { return this; }


protected:
   PoseTypeSupportInterface () {};
   ~PoseTypeSupportInterface () {};
private:
   PoseTypeSupportInterface (const PoseTypeSupportInterface &);
   PoseTypeSupportInterface & operator = (const PoseTypeSupportInterface &);
};

class PoseDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef PoseDataWriter_ptr _ptr_type;
   typedef PoseDataWriter_var _var_type;

   static PoseDataWriter_ptr _duplicate (PoseDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static PoseDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseDataWriter_ptr _this () { return this; }

   virtual DDS::InstanceHandle_t register_instance (const Pose& instance_data) = 0;
   virtual DDS::InstanceHandle_t register_instance_w_timestamp (const Pose& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t unregister_instance (const Pose& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const Pose& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t write (const Pose& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t write_w_timestamp (const Pose& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t dispose (const Pose& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t dispose_w_timestamp (const Pose& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t writedispose (const Pose& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t writedispose_w_timestamp (const Pose& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t get_key_value (Pose& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Pose& instance_data) = 0;

protected:
   PoseDataWriter () {};
   ~PoseDataWriter () {};
private:
   PoseDataWriter (const PoseDataWriter &);
   PoseDataWriter & operator = (const PoseDataWriter &);
};

class PoseDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef PoseDataReader_ptr _ptr_type;
   typedef PoseDataReader_var _var_type;

   static PoseDataReader_ptr _duplicate (PoseDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseDataReader_ptr _narrow (DDS::Object_ptr obj);
   static PoseDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseDataReader_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (Pose& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (Pose& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (Pose& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Pose& instance) = 0;

protected:
   PoseDataReader () {};
   ~PoseDataReader () {};
private:
   PoseDataReader (const PoseDataReader &);
   PoseDataReader & operator = (const PoseDataReader &);
};

class PoseDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef PoseDataReaderView_ptr _ptr_type;
   typedef PoseDataReaderView_var _var_type;

   static PoseDataReaderView_ptr _duplicate (PoseDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static PoseDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseDataReaderView_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (Pose& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (Pose& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PoseSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (Pose& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Pose& instance) = 0;

protected:
   PoseDataReaderView () {};
   ~PoseDataReaderView () {};
private:
   PoseDataReaderView (const PoseDataReaderView &);
   PoseDataReaderView & operator = (const PoseDataReaderView &);
};

template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
