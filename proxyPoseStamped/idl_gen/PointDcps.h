//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: PointDcps.h
//  Source: PointDcps.idl
//  Generated: Wed Oct  2 09:48:22 2013
//  OpenSplice V6.2.0
//  
//******************************************************************
#ifndef _POINTDCPS_H_
#define _POINTDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_builtintopics.h"
#include "dds_builtinTopics.h"
#include "Point.h"
#include "Time.h"
#include "dds_dcps_interfaces.h"
struct Time;
struct Point;

class PointTypeSupportInterface;

typedef PointTypeSupportInterface * PointTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < PointTypeSupportInterface> PointTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < PointTypeSupportInterface> PointTypeSupportInterface_out;


class PointDataWriter;

typedef PointDataWriter * PointDataWriter_ptr;
typedef DDS_DCPSInterface_var < PointDataWriter> PointDataWriter_var;
typedef DDS_DCPSInterface_out < PointDataWriter> PointDataWriter_out;


class PointDataReader;

typedef PointDataReader * PointDataReader_ptr;
typedef DDS_DCPSInterface_var < PointDataReader> PointDataReader_var;
typedef DDS_DCPSInterface_out < PointDataReader> PointDataReader_out;


class PointDataReaderView;

typedef PointDataReaderView * PointDataReaderView_ptr;
typedef DDS_DCPSInterface_var < PointDataReaderView> PointDataReaderView_var;
typedef DDS_DCPSInterface_out < PointDataReaderView> PointDataReaderView_out;


struct PointSeq_uniq_ {};
typedef DDS_DCPSUFLSeq < Point, struct PointSeq_uniq_> PointSeq;
typedef DDS_DCPSSequence_var < PointSeq> PointSeq_var;
typedef DDS_DCPSSequence_out < PointSeq> PointSeq_out;
class PointTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef PointTypeSupportInterface_ptr _ptr_type;
   typedef PointTypeSupportInterface_var _var_type;

   static PointTypeSupportInterface_ptr _duplicate (PointTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PointTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static PointTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PointTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   PointTypeSupportInterface_ptr _this () { return this; }


protected:
   PointTypeSupportInterface () {};
   ~PointTypeSupportInterface () {};
private:
   PointTypeSupportInterface (const PointTypeSupportInterface &);
   PointTypeSupportInterface & operator = (const PointTypeSupportInterface &);
};

class PointDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef PointDataWriter_ptr _ptr_type;
   typedef PointDataWriter_var _var_type;

   static PointDataWriter_ptr _duplicate (PointDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PointDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static PointDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PointDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   PointDataWriter_ptr _this () { return this; }

   virtual DDS::InstanceHandle_t register_instance (const Point& instance_data) = 0;
   virtual DDS::InstanceHandle_t register_instance_w_timestamp (const Point& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t unregister_instance (const Point& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const Point& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t write (const Point& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t write_w_timestamp (const Point& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t dispose (const Point& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t dispose_w_timestamp (const Point& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t writedispose (const Point& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t writedispose_w_timestamp (const Point& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t get_key_value (Point& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Point& instance_data) = 0;

protected:
   PointDataWriter () {};
   ~PointDataWriter () {};
private:
   PointDataWriter (const PointDataWriter &);
   PointDataWriter & operator = (const PointDataWriter &);
};

class PointDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef PointDataReader_ptr _ptr_type;
   typedef PointDataReader_var _var_type;

   static PointDataReader_ptr _duplicate (PointDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PointDataReader_ptr _narrow (DDS::Object_ptr obj);
   static PointDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PointDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   PointDataReader_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (Point& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (Point& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PointSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (Point& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Point& instance) = 0;

protected:
   PointDataReader () {};
   ~PointDataReader () {};
private:
   PointDataReader (const PointDataReader &);
   PointDataReader & operator = (const PointDataReader &);
};

class PointDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef PointDataReaderView_ptr _ptr_type;
   typedef PointDataReaderView_var _var_type;

   static PointDataReaderView_ptr _duplicate (PointDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PointDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static PointDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PointDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   PointDataReaderView_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (Point& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (Point& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PointSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PointSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (Point& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Point& instance) = 0;

protected:
   PointDataReaderView () {};
   ~PointDataReaderView () {};
private:
   PointDataReaderView (const PointDataReaderView &);
   PointDataReaderView & operator = (const PointDataReaderView &);
};

template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
