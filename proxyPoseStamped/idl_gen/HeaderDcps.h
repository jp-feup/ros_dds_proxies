//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: HeaderDcps.h
//  Source: HeaderDcps.idl
//  Generated: Wed Oct  2 09:48:16 2013
//  OpenSplice V6.2.0
//  
//******************************************************************
#ifndef _HEADERDCPS_H_
#define _HEADERDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_builtintopics.h"
#include "dds_builtinTopics.h"
#include "Time.h"
#include "dds_dcps_interfaces.h"
#include "Header.h"
struct Time;
struct Header;

class HeaderTypeSupportInterface;

typedef HeaderTypeSupportInterface * HeaderTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < HeaderTypeSupportInterface> HeaderTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < HeaderTypeSupportInterface> HeaderTypeSupportInterface_out;


class HeaderDataWriter;

typedef HeaderDataWriter * HeaderDataWriter_ptr;
typedef DDS_DCPSInterface_var < HeaderDataWriter> HeaderDataWriter_var;
typedef DDS_DCPSInterface_out < HeaderDataWriter> HeaderDataWriter_out;


class HeaderDataReader;

typedef HeaderDataReader * HeaderDataReader_ptr;
typedef DDS_DCPSInterface_var < HeaderDataReader> HeaderDataReader_var;
typedef DDS_DCPSInterface_out < HeaderDataReader> HeaderDataReader_out;


class HeaderDataReaderView;

typedef HeaderDataReaderView * HeaderDataReaderView_ptr;
typedef DDS_DCPSInterface_var < HeaderDataReaderView> HeaderDataReaderView_var;
typedef DDS_DCPSInterface_out < HeaderDataReaderView> HeaderDataReaderView_out;


struct HeaderSeq_uniq_ {};
typedef DDS_DCPSUVLSeq < Header, struct HeaderSeq_uniq_> HeaderSeq;
typedef DDS_DCPSSequence_var < HeaderSeq> HeaderSeq_var;
typedef DDS_DCPSSequence_out < HeaderSeq> HeaderSeq_out;
class HeaderTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef HeaderTypeSupportInterface_ptr _ptr_type;
   typedef HeaderTypeSupportInterface_var _var_type;

   static HeaderTypeSupportInterface_ptr _duplicate (HeaderTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static HeaderTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static HeaderTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static HeaderTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   HeaderTypeSupportInterface_ptr _this () { return this; }


protected:
   HeaderTypeSupportInterface () {};
   ~HeaderTypeSupportInterface () {};
private:
   HeaderTypeSupportInterface (const HeaderTypeSupportInterface &);
   HeaderTypeSupportInterface & operator = (const HeaderTypeSupportInterface &);
};

class HeaderDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef HeaderDataWriter_ptr _ptr_type;
   typedef HeaderDataWriter_var _var_type;

   static HeaderDataWriter_ptr _duplicate (HeaderDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static HeaderDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static HeaderDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static HeaderDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   HeaderDataWriter_ptr _this () { return this; }

   virtual DDS::InstanceHandle_t register_instance (const Header& instance_data) = 0;
   virtual DDS::InstanceHandle_t register_instance_w_timestamp (const Header& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t unregister_instance (const Header& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const Header& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t write (const Header& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t write_w_timestamp (const Header& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t dispose (const Header& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t dispose_w_timestamp (const Header& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t writedispose (const Header& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t writedispose_w_timestamp (const Header& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t get_key_value (Header& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Header& instance_data) = 0;

protected:
   HeaderDataWriter () {};
   ~HeaderDataWriter () {};
private:
   HeaderDataWriter (const HeaderDataWriter &);
   HeaderDataWriter & operator = (const HeaderDataWriter &);
};

class HeaderDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef HeaderDataReader_ptr _ptr_type;
   typedef HeaderDataReader_var _var_type;

   static HeaderDataReader_ptr _duplicate (HeaderDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static HeaderDataReader_ptr _narrow (DDS::Object_ptr obj);
   static HeaderDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static HeaderDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   HeaderDataReader_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (Header& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (Header& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (Header& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Header& instance) = 0;

protected:
   HeaderDataReader () {};
   ~HeaderDataReader () {};
private:
   HeaderDataReader (const HeaderDataReader &);
   HeaderDataReader & operator = (const HeaderDataReader &);
};

class HeaderDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef HeaderDataReaderView_ptr _ptr_type;
   typedef HeaderDataReaderView_var _var_type;

   static HeaderDataReaderView_ptr _duplicate (HeaderDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static HeaderDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static HeaderDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static HeaderDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   HeaderDataReaderView_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (Header& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (Header& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (HeaderSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (Header& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const Header& instance) = 0;

protected:
   HeaderDataReaderView () {};
   ~HeaderDataReaderView () {};
private:
   HeaderDataReaderView (const HeaderDataReaderView &);
   HeaderDataReaderView & operator = (const HeaderDataReaderView &);
};

template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
