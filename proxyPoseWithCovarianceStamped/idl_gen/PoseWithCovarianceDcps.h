//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: PoseWithCovarianceDcps.h
//  Source: PoseWithCovarianceDcps.idl
//  Generated: Fri Jul 27 15:39:16 2012
//  OpenSplice V5.5.1OSS
//  
//******************************************************************
#ifndef _POSEWITHCOVARIANCEDCPS_H_
#define _POSEWITHCOVARIANCEDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "Quaternion.h"
#include "dds_dcps_builtintopics.h"
#include "Pose.h"
#include "PoseWithCovariance.h"
#include "dds_builtinTopics.h"
#include "Point.h"
#include "Time.h"
#include "dds_dcps_interfaces.h"
struct Time;
struct Point;
struct Quaternion;
struct Pose;
struct PoseWithCovariance;

class PoseWithCovarianceTypeSupportInterface;

typedef PoseWithCovarianceTypeSupportInterface * PoseWithCovarianceTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < PoseWithCovarianceTypeSupportInterface> PoseWithCovarianceTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < PoseWithCovarianceTypeSupportInterface> PoseWithCovarianceTypeSupportInterface_out;


class PoseWithCovarianceDataWriter;

typedef PoseWithCovarianceDataWriter * PoseWithCovarianceDataWriter_ptr;
typedef DDS_DCPSInterface_var < PoseWithCovarianceDataWriter> PoseWithCovarianceDataWriter_var;
typedef DDS_DCPSInterface_out < PoseWithCovarianceDataWriter> PoseWithCovarianceDataWriter_out;


class PoseWithCovarianceDataReader;

typedef PoseWithCovarianceDataReader * PoseWithCovarianceDataReader_ptr;
typedef DDS_DCPSInterface_var < PoseWithCovarianceDataReader> PoseWithCovarianceDataReader_var;
typedef DDS_DCPSInterface_out < PoseWithCovarianceDataReader> PoseWithCovarianceDataReader_out;


class PoseWithCovarianceDataReaderView;

typedef PoseWithCovarianceDataReaderView * PoseWithCovarianceDataReaderView_ptr;
typedef DDS_DCPSInterface_var < PoseWithCovarianceDataReaderView> PoseWithCovarianceDataReaderView_var;
typedef DDS_DCPSInterface_out < PoseWithCovarianceDataReaderView> PoseWithCovarianceDataReaderView_out;


struct PoseWithCovarianceSeq_uniq_ {};
typedef DDS_DCPSUVLSeq < PoseWithCovariance, struct PoseWithCovarianceSeq_uniq_> PoseWithCovarianceSeq;
typedef DDS_DCPSSequence_var < PoseWithCovarianceSeq> PoseWithCovarianceSeq_var;
typedef DDS_DCPSSequence_out < PoseWithCovarianceSeq> PoseWithCovarianceSeq_out;
class PoseWithCovarianceTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef PoseWithCovarianceTypeSupportInterface_ptr _ptr_type;
   typedef PoseWithCovarianceTypeSupportInterface_var _var_type;

   static PoseWithCovarianceTypeSupportInterface_ptr _duplicate (PoseWithCovarianceTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseWithCovarianceTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseWithCovarianceTypeSupportInterface_ptr _this () { return this; }


protected:
   PoseWithCovarianceTypeSupportInterface () {};
   ~PoseWithCovarianceTypeSupportInterface () {};
private:
   PoseWithCovarianceTypeSupportInterface (const PoseWithCovarianceTypeSupportInterface &);
   PoseWithCovarianceTypeSupportInterface & operator = (const PoseWithCovarianceTypeSupportInterface &);
};

class PoseWithCovarianceDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef PoseWithCovarianceDataWriter_ptr _ptr_type;
   typedef PoseWithCovarianceDataWriter_var _var_type;

   static PoseWithCovarianceDataWriter_ptr _duplicate (PoseWithCovarianceDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseWithCovarianceDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseWithCovarianceDataWriter_ptr _this () { return this; }

   virtual DDS::InstanceHandle_t register_instance (const PoseWithCovariance& instance_data) = 0;
   virtual DDS::InstanceHandle_t register_instance_w_timestamp (const PoseWithCovariance& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t unregister_instance (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t write (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t write_w_timestamp (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t dispose (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t dispose_w_timestamp (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t writedispose (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t writedispose_w_timestamp (const PoseWithCovariance& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t get_key_value (PoseWithCovariance& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const PoseWithCovariance& instance_data) = 0;

protected:
   PoseWithCovarianceDataWriter () {};
   ~PoseWithCovarianceDataWriter () {};
private:
   PoseWithCovarianceDataWriter (const PoseWithCovarianceDataWriter &);
   PoseWithCovarianceDataWriter & operator = (const PoseWithCovarianceDataWriter &);
};

class PoseWithCovarianceDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef PoseWithCovarianceDataReader_ptr _ptr_type;
   typedef PoseWithCovarianceDataReader_var _var_type;

   static PoseWithCovarianceDataReader_ptr _duplicate (PoseWithCovarianceDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseWithCovarianceDataReader_ptr _narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseWithCovarianceDataReader_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (PoseWithCovariance& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (PoseWithCovariance& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (PoseWithCovariance& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const PoseWithCovariance& instance) = 0;

protected:
   PoseWithCovarianceDataReader () {};
   ~PoseWithCovarianceDataReader () {};
private:
   PoseWithCovarianceDataReader (const PoseWithCovarianceDataReader &);
   PoseWithCovarianceDataReader & operator = (const PoseWithCovarianceDataReader &);
};

class PoseWithCovarianceDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef PoseWithCovarianceDataReaderView_ptr _ptr_type;
   typedef PoseWithCovarianceDataReaderView_var _var_type;

   static PoseWithCovarianceDataReaderView_ptr _duplicate (PoseWithCovarianceDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static PoseWithCovarianceDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static PoseWithCovarianceDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   PoseWithCovarianceDataReaderView_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (PoseWithCovariance& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (PoseWithCovariance& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (PoseWithCovarianceSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (PoseWithCovariance& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const PoseWithCovariance& instance) = 0;

protected:
   PoseWithCovarianceDataReaderView () {};
   ~PoseWithCovarianceDataReaderView () {};
private:
   PoseWithCovarianceDataReaderView (const PoseWithCovarianceDataReaderView &);
   PoseWithCovarianceDataReaderView & operator = (const PoseWithCovarianceDataReaderView &);
};

template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
