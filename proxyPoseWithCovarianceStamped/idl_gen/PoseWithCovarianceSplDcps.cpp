#include "PoseWithCovarianceSplDcps.h"
#include "ccpp_PoseWithCovariance.h"

const char *
__PoseWithCovariance__name(void)
{
    return (const char*)"PoseWithCovariance";
}

const char *
__PoseWithCovariance__keys(void)
{
    return (const char*)"";
}

#include <v_kernel.h>
#include <v_topic.h>
#include <os_stdlib.h>
#include <string.h>

c_bool
__PoseWithCovariance__copyIn(
    c_base base,
    struct PoseWithCovariance *from,
    struct _PoseWithCovariance *to)
{
    c_bool result = TRUE;

    if(result){
        extern c_bool __Pose__copyIn(c_base, Pose *, _Pose *);
        result = __Pose__copyIn(base, &from->pose, &to->pose);
    }
    {
/* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 654 */

        static c_type type0 = NULL;
        c_type subtype0;
        c_long length0;
        c_double *dest0;
        ::PoseWithCovariance::_covariance_seq *src = &from->covariance;

        if (type0 == NULL) {
            subtype0 = c_type(c_metaResolve (c_metaObject(base), "c_double"));
            type0 = c_metaSequenceTypeNew(c_metaObject(base),"C_SEQUENCE<c_double,36>",subtype0,36);
            c_free(subtype0);
        }
        length0 = (c_long)(*src).length();
#ifdef OSPL_BOUNDS_CHECK
        if(length0 > 36){
            result = FALSE;
        } else {
            dest0 = (c_double *)c_newSequence(c_collectionType(type0),length0);
            {
            /* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 1680 */
                c_double *buf0;
                buf0 = (c_double *)(*src).get_buffer();
                memcpy (dest0,buf0,length0* sizeof(*dest0));
            }
            to->covariance = (c_sequence)dest0;
        }
#else
        dest0 = (c_double *)c_newSequence(c_collectionType(type0),length0);
        {
        /* Code generated by ../../code/idl_genCorbaCxxCopyin.c at line 1680 */
            c_double *buf0;
            buf0 = (c_double *)(*src).get_buffer();
            memcpy (dest0,buf0,length0* sizeof(*dest0));
        }
        to->covariance = (c_sequence)dest0;
#endif
    }
    return result;
}

void
__PoseWithCovariance__copyOut(
    void *_from,
    void *_to)
{
    struct _PoseWithCovariance *from = (struct _PoseWithCovariance *)_from;
    struct PoseWithCovariance *to = (struct PoseWithCovariance *)_to;
    {
        extern void __Pose__copyOut(void *, void *);
        __Pose__copyOut((void *)&from->pose, (void *)&to->pose);
    }
    {
        long size0;
        c_double *src0 = (c_double *)from->covariance;
        ::PoseWithCovariance::_covariance_seq *dst = &to->covariance;

        size0 = c_arraySize(c_sequence(from->covariance));
        to->covariance.length(size0);
        {
            c_double *buf0;
            buf0 = (c_double *)(*dst).get_buffer();
            memcpy (buf0,src0,size0* sizeof(*buf0));
        }
    }
}

